package com.example.fltctl.utils

import android.app.Activity
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

/**
 * Generated by ChatGPT, modified
 */
object RuntimePermissionUtil {

    private const val PERMISSIONS_REQUEST_CODE = 114514

    private var resultListener: ((List<PermissionResult>) -> Unit)? = null

    fun checkPermissions(activity: Activity, permissions: Array<String>): Boolean {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            for (permission in permissions) {
                val result = ContextCompat.checkSelfPermission(activity, permission)
                if (result != PackageManager.PERMISSION_GRANTED) {
                    return false
                }
            }
        }
        return true
    }

    fun requestPermissions(activity: Activity, permissions: Array<String>, onResult: ((results: List<PermissionResult>) -> Unit)? = null) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ActivityCompat.requestPermissions(activity, permissions, PERMISSIONS_REQUEST_CODE)
            resultListener = onResult
        }
    }

    fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        if (requestCode == PERMISSIONS_REQUEST_CODE) {
            permissions.mapIndexed { index, perm ->
                PermissionResult(perm, grantResults[index], grantResults[index] == PackageManager.PERMISSION_GRANTED)
            }.let {
                resultListener?.invoke(it)
                resultListener = null
            }
        }
    }
}

data class PermissionResult(
    val permission: String,
    val rawResult: Int,
    val granted: Boolean
)
